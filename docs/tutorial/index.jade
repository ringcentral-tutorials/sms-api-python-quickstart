.chapter(data-title='SMS API Python Quickstart')
  .step(data-title='Welcome!', data-file='../README.md'  data-highlight='11-17')
    h2 Welcome to SMS API Python Quickstart

    p This is a quickstart tutorial to teach users to use RingCentral SMS API.

  .step(data-title='Clone and Setup the project', data-file='../README.md' data-highlight='21-29')
    :markdown
      ### Clone and Setup the project
      Clone the project from GitHub and install RingCentral SDK and dependencies.

  .step(data-title='Environment Variables', data-file='../dotenv')
    :markdown
     ### Set environment parameters
     ```
     $ cp dotenv .env
     ```
     Add your app client id and client secret as well as account login credentials to the .env file.
     * __Note__: The username is the account number and it is also the phone number we will use to send SMS/MMS from. If you want to use another number under this account, you can create a new variable and specify the phone number and use that number for sending SMS/MMS instead.

  .step(data-title='Authentication', data-file='../authentication.py')
    :markdown
     ### Authentication
     ---
     Let's create a file `authentication.py`, import the RingCentral Python SDK and other utility libs

     We will load the environment variables from `.env` file and implement RingCentral authentication.

     In this module we implement 3 utility functions:
     * `get_sdk():` returns the `sdk` instance instantiated using our client id and secret.

     * `get_platform():` performs the password flow login and returns the `platform` instance, which we can use to call RingCentral APIs.

     * `get_phonenumber():` returns the 'username' we specified in the __.env__ file and use it as the phone number for sending SMS/MMS message.


.chapter(data-title='Send SMS')
  .step(data-title='Send SMS - 1', data-file='../send-sms.py', data-highlight='1-1')
    :markdown
     ### Send SMS - 1
     ---
     Create a file `send-sms.py` and import the `authentication.py` module.

  .step(data-title='Send SMS - 2', data-file='../send-sms.py', data-highlight='4-14')
    :markdown
     ### Send SMS - 2
     ---
     Define the `params` parameter and specify the _from, to_ and the _text_ parameters.

     Get the `platform` instance from the `authentication.get_platform()` function.

     Call the `platform.post()` function to send the SMS message.

     Print the sent SMS message id from the response.

  .step(data-title='Send SMS - 3', data-file='../send-sms.py', data-highlight='17-19')
    :markdown
      ### Send SMS - 3
      ---
      Specify the recipient's phone number and the text message.

      Call the `send_sms_message(toNumber, message)` function to send the message.

      ### Run the demo
      $ python send_sms.py

.chapter(data-title='Send MMS')
  .step(data-title='Send MMS - 1', data-file='../send-mms.py', data-highlight='1-1')
    :markdown
      ### Send MMS - 1
      ---
      Create a file `send-mms.py` and import the `authentication.py` module.

  .step(data-title='Send MMS - 2', data-file='../send-mms.py', data-highlight='4-5')
    :markdown
      ### Send MMS - 2
      ---
      Get the SDK instance and create a multipart builder

  .step(data-title='Send MMS - 3', data-file='../send-mms.py', data-highlight='6-11')
    :markdown
      ### Send MMS - 3
      ---
      Build the MMS message body


  .step(data-title='Send MMS - 4', data-file='../send-mms.py', data-highlight='13-16')
    :markdown
      ### Send MMS - 4
      ---
      Use the `builder` to create a `request`

      Get the `platform` instance and send the request

      Print MMS message id from the response.


  .step(data-title='Send MMS - 5', data-file='../send-mms.py', data-highlight='21-25')
    :markdown
      ### Send SMS - 5
      ---
      Create MMS attachment, specify the recipient's phone number and the text message.

      Call the `send_mms_message(toNumber, attachment, message)` to send the message.

      ### Run the demo
      $ python send_mms.py

.chapter(data-title='How to track delivery status of messages')
  .step(data-title='Track delivery status of messages - 1', data-file='../track-status.py', data-highlight='1')
    :markdown
      ### Track delivery status of messages - 1
      ---
      Create a file `track-status.py` and import the `authentication.py` module.

  .step(data-title='Track delivery status of messages - 2', data-file='../track-status.py', data-highlight='18-24')
    :markdown
      ### Track delivery status of messages - 2
      ---
      We reuse the codes for sending MMS.

      We add a few lines to track the delivery status.

      If everything goes well, code highlighted on the right will print `Message was sent successfully`. Otherwise it will print an error status.

      ### Run the demo
      $ python send_sms.py

.chapter(data-title='How to retrieve and modify message read status')
  .step(data-title='How to retrieve and modify message read status - 1', data-file='../retrieve-modify.py', data-highlight='1')
    :markdown
      ### Retrieve and modify message read status - 1
      ---
      Create a file `retrieve-modify.py` and import the `authentication.py` module.

  .step(data-title='How to retrieve and modify message read status - 2', data-file='../retrieve-modify.py', data-highlight='6-7')
    :markdown
      ### Retrieve and modify message read status - 2
      ---
      Define the `dateFrom` value to read the message store

      * Here we set the parameter `dateFrom`, if we omit it, its value will by default be set to 24 hours ago.

  .step(data-title='How to retrieve and modify message read status - 3', data-file='../retrieve-modify.py', data-highlight='8-14')
    :markdown
      ### Retrieve and modify message read status - 3
      ---
      Get the `platform` instance from the `authentication.get_platform()` function.

      Call the `platform.get()` function to read the message store.

      Get the records list and count of items.

      Print the number of items in the records list.

  .step(data-title='How to retrieve and modify message read status - 4', data-file='../retrieve-modify.py', data-highlight='15-22')
    :markdown
      ### Retrieve and modify message read status - 4
      ---
      Iterate thru the `messages` list.

      * Check if the message status is 'Read'.

      * Get the `messageId` and call `platform.put()` to change the message status to "Unread".

      * Catch the new message status and print the status.

      ### Run the demo
      $ python retrive-modify.py

  .step(data-title='How to retrieve and delete a message', data-file='../retrieve-modify.py', data-highlight='24-25')
    :markdown
      ### How to retrieve and delete a message
      ---
      Check if there is a message from the `messages` list.

      Delete the first message.

      Print the id of the message we just deleted.

      ### Run the demo
      $ python retrieve-modify.py

.chapter(data-title='How to receive and reply to SMS messages')
  .step(data-title='How to receive and reply to SMS messages - 1', data-file='../receive-reply.py', data-highlight='1-9')
    :markdown
      ### How to receive and reply to SMS messages - 1
      ---
      Create a file `receive-reply.py` and import RingCentral Python SDK and utility libraries.


  .step(data-title='How to receive and reply to SMS messages - 2', data-file='../receive-reply.py', data-highlight='13-23')
    :markdown
      ### How to receive and reply to SMS messages - 2
      ---
      Implement RingCentral platform authentication and get the `platform` instance

      Get the `fromNumber` which will be used later on for replying an incoming SMS message.

  .step(data-title='How to receive and reply to SMS messages - 3', data-file='../receive-reply.py', data-highlight='27-30')
    :markdown
      ### How to receive and reply to SMS messages - 3
      ---
      Implement the `pubnub()` function

      * Get the `subscription` instance from the `sdk.create_subscription()`.

      * Add the SMS notification filter. For a full list of available event filters, please refer to https://developer.ringcentral.com/api-docs/latest/index.html#!#EventTypes.html

      * Set the filter and event handler `on_message`

      * Register the `subscription.register()`


  .step(data-title='How to receive and reply to SMS messages - 4', data-file='../receive-reply.py', data-highlight='32-35')
    :markdown
      ### How to receive and reply to SMS messages - 4
      ---
      Create a file named `subid.txt` and write the subscription id into the file.

      * We will read the subscription id every time we run the demo and use the id to delete the old subscription before creating a new one.

  .step(data-title='How to receive and reply to SMS messages - 5', data-file='../receive-reply.py', data-highlight='44-51')
    :markdown
      ### How to receive and reply to SMS messages - 5
      ---
      #### Handle notification messages.

      Get the phone number of the sender.

      Use the `fromNumber` to reply the incoming SMS message.

      Print the sent message id.

  .step(data-title='How to receive and reply to SMS messages - 6', data-file='../receive-reply.py', data-highlight='53-64')
    :markdown
      ### How to receive and reply to SMS messages - 6
      ---
      Read the subscription id from the subid.txt file.

      Call the `platform.delete()` to delete the old subscription.

      * This is important because each extension can have up to max 20 subscriptions. When the limit is exceeded, you will get the 'Subscriptions limit exceeded' error message.

      ### Run the demo
      $ python receive-reply.py

  .step(data-title='How to receive and reply to SMS messages - 7', data-file='../receive-reply.py')
    :markdown
      ### How to receive and reply to SMS messages - 7
      ---

      #### WebHook

      The subscription we created above uses [PubNub](https://www.pubnub.com/).

      There is also a [WebHook way to do subscription](http://ringcentral-api-docs.readthedocs.io/en/latest/notifications_webhooks/). We won't dive into detail here. You can click the link to read more.
